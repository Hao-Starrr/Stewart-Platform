/**
 * stewart-platform
 * 
 * Authors: Leroy Sibanda, Michael Rosa
 * Date: August 2018
 * 
 * Program to test and calibrate an Stewart platform based on an Arduino Mega and motor drivers
 */

#include "configuration.h"
#include "Actuator.h"
#include "Platform.h"
#include "eeprom.h"

int count2 = 0;

#if DEMO > 0
  float positions[][6] = {

{0.96, 2.84, 9.25, 0.04, -0.21, 0.02},{0.98, 2.73, 9.14, 0.03, -0.26, 0.05},{1.02, 2.78, 9.06, 0.02, -0.29, 0.06},{1.04, 2.91, 8.99, -0.01, -0.30, 0.05},{1.05, 2.97, 8.80, -0.06, -0.35, 0.06},{1.05, 2.98, 8.68, -0.12, -0.38, 0.06},{1.07, 3.00, 8.58, -0.12, -0.41, 0.04},{1.08, 2.99, 8.51, -0.12, -0.44, 0.04},{1.10, 3.00, 8.42, -0.15, -0.47, 0.04},{1.12, 2.99, 8.30, -0.19, -0.49, 0.03},{1.13, 2.96, 8.20, -0.22, -0.49, 0.02},{1.13, 2.89, 8.08, -0.30, -0.49, 0.03},{1.17, 2.85, 7.87, -0.38, -0.51, 0.02},{1.22, 2.82, 7.65, -0.50, -0.53, 0.02},{1.23, 2.79, 7.57, -0.59, -0.48, 0.02},{1.24, 2.81, 7.68, -0.58, -0.43, 0.03},{1.21, 2.87, 8.01, -0.40, -0.43, 0.07},{1.18, 2.81, 8.24, -0.25, -0.44, 0.11},{1.17, 2.77, 8.49, -0.10, -0.43, 0.12},{1.14, 2.77, 8.74, 0.02, -0.43, 0.11},{1.12, 2.71, 8.94, 0.10, -0.45, 0.12},{1.13, 2.63, 9.16, 0.20, -0.41, 0.11},{1.12, 2.62, 9.36, 0.27, -0.41, 0.10},{1.06, 2.57, 9.54, 0.38, -0.45, 0.10},{1.06, 2.47, 9.71, 0.51, -0.47, 0.07},{1.25, 2.61, 9.78, 0.54, -0.47, -0.07},{1.56, 2.88, 9.83, 0.49, -0.48, -0.25},{1.86, 3.19, 9.67, 0.35, -0.47, -0.44},{2.11, 3.45, 9.41, 0.20, -0.44, -0.60},{2.29, 3.65, 9.06, -0.00, -0.37, -0.71},{2.37, 3.79, 8.72, -0.20, -0.30, -0.74},{2.28, 3.82, 8.45, -0.38, -0.22, -0.67},{2.13, 3.79, 8.21, -0.50, -0.15, -0.56},{1.94, 3.61, 8.06, -0.59, -0.11, -0.42},{1.75, 3.34, 8.00, -0.69, -0.04, -0.29},{1.48, 3.04, 8.10, -0.74, 0.02, -0.10},{1.23, 2.73, 8.44, -0.71, 0.05, 0.09},{1.07, 2.61, 8.96, -0.60, 0.13, 0.20},{0.92, 2.44, 9.38, -0.41, 0.11, 0.32},{0.77, 2.19, 9.58, -0.29, 0.08, 0.44},{0.66, 2.01, 9.74, -0.16, 0.02, 0.51},{0.57, 1.82, 9.92, -0.01, -0.03, 0.56},{0.50, 1.52, 10.20, 0.18, -0.05, 0.62},{0.50, 1.33, 10.36, 0.34, -0.09, 0.63},{0.55, 1.37, 10.43, 0.48, -0.14, 0.56},{0.72, 1.68, 10.56, 0.56, -0.13, 0.37},{0.99, 2.09, 10.71, 0.60, -0.13, 0.14},{1.28, 2.39, 10.74, 0.62, -0.15, -0.05},{1.53, 2.60, 10.75, 0.60, -0.18, -0.19},{1.59, 2.67, 10.52, 0.44, -0.17, -0.23},{1.55, 2.70, 10.63, 0.54, -0.18, -0.20},{1.54, 2.71, 10.56, 0.51, -0.18, -0.19},{1.61, 2.83, 10.02, 0.17, -0.12, -0.22},{1.68, 3.12, 9.45, -0.13, -0.04, -0.25},{1.73, 3.21, 8.96, -0.37, 0.01, -0.27},{1.76, 3.24, 8.58, -0.52, 0.05, -0.30},{1.77, 3.28, 8.48, -0.57, 0.06, -0.31},{1.69, 3.41, 8.80, -0.50, 0.08, -0.29},{1.59, 3.44, 9.33, -0.29, 0.08, -0.22},{1.40, 3.37, 10.11, 0.00, 0.13, -0.11},{1.06, 2.83, 10.60, 0.24, 0.12, 0.12},{0.87, 2.27, 10.74, 0.38, 0.07, 0.28},{0.81, 1.84, 10.72, 0.47, 0.03, 0.34},{1.02, 1.95, 10.45, 0.36, -0.02, 0.18},{1.38, 2.57, 10.02, 0.09, -0.03, -0.09},{1.83, 3.13, 9.75, -0.19, 0.09, -0.33},{2.53, 3.54, 9.65, -0.31, 0.25, -0.69},{2.88, 3.61, 9.32, -0.35, 0.19, -0.84},{2.96, 3.57, 9.27, -0.34, 0.13, -0.86},{2.92, 3.57, 9.45, -0.25, -0.00, -0.79},{2.79, 3.50, 9.76, -0.00, -0.16, -0.70},{2.51, 3.30, 10.14, 0.27, -0.22, -0.58},{2.13, 2.94, 10.48, 0.47, -0.18, -0.44},{1.90, 2.69, 10.87, 0.50, -0.01, -0.35},{1.85, 2.72, 11.10, 0.48, 0.14, -0.35},{1.83, 2.77, 11.34, 0.49, 0.28, -0.34},{1.82, 2.77, 11.48, 0.49, 0.41, -0.31},{1.87, 2.74, 11.59, 0.47, 0.53, -0.29},{1.84, 2.65, 11.64, 0.47, 0.58, -0.20},{1.76, 2.55, 11.63, 0.47, 0.64, -0.13},{1.61, 2.38, 11.54, 0.48, 0.61, -0.05},{1.42, 2.30, 11.21, 0.48, 0.42, 0.01},{1.31, 2.35, 10.89, 0.46, 0.22, 0.01},{1.33, 2.54, 10.67, 0.43, 0.06, -0.07},{1.57, 2.91, 10.43, 0.41, -0.13, -0.18},{1.59, 3.03, 10.31, 0.44, -0.26, -0.19},{1.51, 3.01, 10.14, 0.46, -0.39, -0.15},{1.47, 3.00, 9.83, 0.36, -0.48, -0.11},{1.57, 3.07, 9.16, 0.16, -0.64, -0.12},{1.71, 3.21, 8.71, -0.08, -0.63, -0.20},{1.72, 3.27, 8.54, -0.26, -0.52, -0.26},{1.63, 3.35, 8.72, -0.36, -0.36, -0.29},{1.50, 3.47, 9.28, -0.27, -0.22, -0.27},{1.39, 3.43, 9.74, -0.13, -0.18, -0.23},{1.36, 3.34, 9.91, -0.02, -0.17, -0.21},{1.36, 3.31, 9.98, 0.03, -0.16, -0.21},{1.38, 3.31, 9.97, 0.02, -0.16, -0.21},{1.39, 3.32, 9.97, 0.02, -0.17, -0.21},{1.40, 3.34, 9.97, 0.02, -0.18, -0.21},{1.42, 3.32, 9.94, 0.01, -0.20, -0.21},{1.42, 3.29, 9.93, 0.03, -0.18, -0.20},{1.45, 3.26, 9.91, 0.04, -0.21, -0.20},{1.46, 3.25, 9.91, 0.05, -0.20, -0.19},{1.48, 3.27, 9.90, 0.03, -0.17, -0.21},{1.49, 3.25, 9.84, -0.01, -0.18, -0.21},{1.48, 3.24, 10.00, 0.09, -0.19, -0.20},{1.40, 3.05, 10.06, 0.12, -0.20, -0.15},{1.40, 2.98, 9.83, -0.05, -0.18, -0.18},{1.51, 3.11, 9.50, -0.19, -0.16, -0.24},{1.68, 3.44, 9.38, -0.25, -0.18, -0.31},{1.75, 3.76, 9.60, -0.16, -0.17, -0.35},{1.79, 3.90, 10.01, 0.01, -0.19, -0.36},{1.70, 3.68, 10.48, 0.24, -0.21, -0.31},{1.50, 3.06, 10.68, 0.40, -0.23, -0.20},{1.22, 2.46, 10.52, 0.38, -0.23, -0.07},{1.06, 2.35, 10.10, 0.14, -0.22, -0.04},{1.09, 2.75, 9.56, -0.14, -0.19, -0.14},{0.85, 2.86, 9.26, -0.39, -0.06, -0.04},{0.74, 2.78, 8.99, -0.72, 0.03, -0.00},{1.57, 3.64, 9.03, -0.80, 0.15, -0.52},{2.91, 4.36, 9.20, -0.56, 0.13, -1.20},{3.97, 4.36, 9.39, -0.18, -0.20, -1.67},{3.85, 4.33, 9.91, 0.24, -0.47, -1.56},{2.53, 3.97, 10.32, 0.46, -0.35, -0.88},{1.15, 2.86, 10.06, 0.27, -0.11, -0.02},{0.38, 1.62, 9.86, 0.03, -0.04, 0.59},{0.05, 1.03, 9.89, -0.25, 0.10, 0.79},{0.20, 1.36, 9.47, -0.55, 0.23, 0.61},{0.60, 2.15, 9.69, -0.54, 0.52, 0.34},{0.99, 2.85, 10.62, -0.19, 0.71, 0.16},{1.21, 2.90, 11.49, 0.30, 0.63, 0.07},{1.13, 2.57, 11.51, 0.63, 0.19, 0.10},{0.87, 1.99, 11.14, 0.72, -0.10, 0.24},{0.52, 1.18, 10.62, 0.64, -0.23, 0.56},{0.31, 0.63, 9.92, 0.33, -0.31, 0.80},{0.36, 0.73, 9.37, -0.06, -0.32, 0.79},{0.45, 1.02, 9.21, -0.18, -0.29, 0.69},{0.54, 1.28, 9.09, -0.27, -0.30, 0.59},{0.62, 1.43, 8.92, -0.37, -0.30, 0.54},{0.68, 1.65, 8.77, -0.46, -0.27, 0.45},{0.78, 2.02, 8.73, -0.56, -0.17, 0.30},{0.96, 2.45, 8.86, -0.59, 0.03, 0.12},{1.23, 2.80, 9.00, -0.55, 0.16, -0.04},{1.49, 3.12, 9.38, -0.45, 0.30, -0.16},{1.63, 3.22, 9.88, -0.27, 0.37, -0.19},{1.56, 3.11, 10.44, -0.08, 0.45, -0.14},{1.41, 2.96, 10.95, 0.12, 0.46, -0.08},{1.30, 2.80, 11.07, 0.26, 0.36, -0.03},{1.27, 2.64, 11.05, 0.36, 0.25, -0.01},{1.18, 2.44, 11.09, 0.47, 0.16, 0.03},{1.09, 2.24, 11.02, 0.59, 0.05, 0.06},{1.03, 2.09, 10.98, 0.71, -0.06, 0.08},{0.90, 1.90, 10.81, 0.80, -0.22, 0.14},{0.82, 1.87, 10.30, 0.77, -0.49, 0.18},{0.84, 1.91, 9.45, 0.65, -0.82, 0.25},{0.97, 2.07, 8.57, 0.46, -1.03, 0.26},{1.07, 2.21, 8.20, 0.28, -1.02, 0.21},{1.14, 2.28, 8.07, 0.13, -0.90, 0.18},{1.20, 2.43, 8.15, -0.02, -0.73, 0.09},{1.26, 2.67, 8.33, -0.12, -0.56, -0.01},{1.29, 2.89, 8.75, -0.07, -0.35, -0.06},{1.27, 3.01, 9.20, -0.03, -0.17, -0.09},{1.21, 3.05, 9.63, 0.01, -0.10, -0.10},{1.23, 3.10, 9.89, 0.06, -0.04, -0.13},{1.22, 3.11, 10.08, 0.06, 0.02, -0.15},{1.17, 3.09, 10.21, 0.07, 0.05, -0.14},{1.15, 3.12, 10.19, 0.06, 0.04, -0.14},{1.16, 3.13, 10.17, 0.05, 0.05, -0.15},{1.17, 3.11, 10.11, 0.04, 0.01, -0.14},{1.20, 3.11, 10.08, 0.04, 0.00, -0.14},{1.18, 3.07, 10.17, 0.06, 0.02, -0.12},{1.16, 3.07, 10.16, 0.06, 0.03, -0.11},{1.18, 3.09, 10.19, 0.07, 0.02, -0.11},{1.18, 3.09, 10.18, 0.05, 0.04, -0.12},{1.19, 3.08, 10.03, 0.01, 0.01, -0.12},{1.21, 3.08, 10.12, 0.03, 0.04, -0.11},{1.23, 3.08, 10.07, 0.01, 0.02, -0.11},{1.23, 3.09, 10.04, -0.00, -0.03, -0.11},{1.21, 3.06, 10.02, 0.03, 0.00, -0.10},{1.19, 3.03, 10.11, 0.01, 0.01, -0.10},{1.19, 3.05, 10.04, 0.03, 0.04, -0.11},{1.13, 3.02, 10.16, 0.05, 0.01, -0.10},{1.11, 2.99, 10.34, 0.14, -0.00, -0.09},{1.10, 2.94, 10.49, 0.22, -0.02, -0.09},{1.09, 2.87, 10.56, 0.28, -0.04, -0.09},{1.07, 2.80, 10.66, 0.33, -0.04, -0.09},{1.05, 2.72, 10.73, 0.40, -0.06, -0.10},{1.07, 2.64, 10.73, 0.41, -0.09, -0.12},{1.12, 2.68, 10.82, 0.38, -0.05, -0.16},{1.11, 2.69, 10.95, 0.44, -0.05, -0.15},{1.09, 2.58, 10.77, 0.37, -0.09, -0.14},{1.40, 2.91, 10.64, 0.27, -0.12, -0.38},{2.14, 3.49, 10.46, 0.17, -0.10, -0.83},{3.35, 3.95, 10.07, 0.07, -0.00, -1.46},{4.50, 3.89, 9.30, -0.08, 0.06, -2.06},{4.97, 3.94, 8.28, -0.39, -0.02, -2.23},{4.72, 4.15, 7.32, -0.74, -0.18, -2.02},{3.96, 4.65, 7.47, -0.74, -0.15, -1.63},{3.11, 4.98, 8.38, -0.49, -0.05, -1.21},{2.35, 4.84, 9.33, -0.22, 0.01, -0.84},{1.87, 4.46, 10.02, 0.06, -0.06, -0.56},{1.64, 3.97, 10.46, 0.37, -0.15, -0.42},{1.48, 3.47, 10.74, 0.63, -0.24, -0.40},{1.32, 3.00, 11.18, 0.81, -0.31, -0.41},{1.19, 2.61, 11.74, 0.94, -0.33, -0.38},{1.22, 2.49, 11.95, 0.98, -0.37, -0.41},{1.40, 2.61, 11.36, 0.92, -0.52, -0.51},{1.63, 2.85, 10.36, 0.62, -0.62, -0.62},{1.85, 3.08, 9.66, 0.24, -0.52, -0.72},{2.21, 3.39, 9.48, -0.06, -0.26, -0.95},{2.73, 3.61, 9.29, -0.26, 0.13, -1.20},{3.05, 3.79, 9.37, -0.22, 0.57, -1.25},{2.87, 3.88, 9.63, -0.09, 0.77, -1.02},{2.34, 3.79, 9.90, 0.06, 0.65, -0.68},{1.67, 3.39, 10.21, 0.25, 0.45, -0.28},{1.15, 2.89, 10.34, 0.39, 0.22, 0.05},{0.86, 2.47, 10.15, 0.48, -0.10, 0.30},{0.86, 2.21, 9.29, 0.23, -0.39, 0.38},{1.18, 2.48, 8.46, -0.17, -0.40, 0.19},{1.65, 3.19, 8.73, -0.20, -0.04, -0.21},{1.93, 3.50, 9.89, 0.16, 0.24, -0.35},{1.65, 3.12, 10.56, 0.52, 0.12, -0.15},{1.18, 2.44, 10.93, 0.74, 0.06, 0.17},{0.88, 1.86, 11.13, 0.80, 0.10, 0.40},{0.66, 1.27, 11.35, 0.85, 0.15, 0.58},{0.51, 0.47, 11.55, 0.86, 0.20, 0.83},{0.44, 0.04, 10.89, 0.68, 0.01, 1.00},{0.41, 0.35, 9.66, 0.38, -0.32, 0.97},{0.53, 0.98, 8.67, 0.07, -0.55, 0.84},{0.78, 1.63, 8.22, -0.14, -0.58, 0.60},{1.20, 2.34, 7.77, -0.26, -0.65, 0.33},{1.58, 2.91, 7.50, -0.36, -0.68, 0.09},{1.75, 3.11, 7.23, -0.51, -0.73, -0.04},{1.94, 3.20, 7.03, -0.54, -0.76, -0.10},{2.12, 3.50, 7.35, -0.40, -0.67, -0.23},{2.05, 3.71, 8.01, -0.18, -0.45, -0.28},{1.81, 3.72, 8.89, -0.06, -0.12, -0.23},{1.57, 3.58, 9.83, 0.01, 0.19, -0.17},{1.52, 3.37, 10.72, 0.09, 0.48, -0.11},{1.65, 3.14, 11.18, 0.15, 0.70, -0.07},{1.76, 3.05, 10.83, 0.17, 0.73, -0.09},{1.78, 3.00, 10.17, 0.12, 0.70, -0.10},{1.75, 3.03, 9.54, 0.10, 0.58, -0.12},{1.78, 3.11, 9.09, 0.13, 0.44, -0.16},{1.87, 3.17, 8.66, 0.14, 0.24, -0.18},{1.93, 3.20, 8.42, 0.13, 0.13, -0.19},{1.93, 3.19, 8.23, 0.12, 0.05, -0.19},{2.01, 3.19, 7.99, 0.10, -0.06, -0.19},{2.07, 3.23, 7.97, 0.10, -0.06, -0.21},{2.04, 3.22, 7.94, 0.09, -0.05, -0.21},{2.02, 3.22, 7.97, 0.08, -0.03, -0.20},{2.05, 3.23, 7.92, 0.08, -0.06, -0.18},{2.07, 3.25, 7.96, 0.08, -0.03, -0.20},{2.08, 3.28, 7.99, 0.09, -0.04, -0.22},{2.15, 3.38, 8.18, 0.13, -0.03, -0.28},{2.15, 3.36, 8.10, 0.12, -0.05, -0.28},{2.06, 3.22, 8.05, 0.12, -0.05, -0.19},{2.12, 3.24, 8.08, 0.11, -0.02, -0.22},{2.07, 3.14, 8.03, 0.11, -0.02, -0.18},{1.83, 2.61, 7.84, 0.10, -0.09, 0.02},{1.55, 2.11, 7.90, 0.11, -0.08, 0.13}



};
  // float positions[][6] = {
  //   {5,  0,  5,  0.0, 0.5,  0},
  //   {-4.04,2.938,5,0.294, -0.405, 0.194},
  //   {1.545,-4.755, 5, -0.476, 0.155, -0.314},
  //   {1.545,4.755,5,0.476,0.155,0.314},
  //   {-4.04,-2.938,5,-0.294,-0.405,-0.194},
  // };
#else
  #define POINTS 50
#endif


// ------ main program ------ //
Platform platform;
  
void setup() {
  Serial.begin(9600);

  // set the analog ref (5V regulator)
  analogReference(EXTERNAL);

  pinMode(SHDN_BTN, INPUT_PULLUP);

  platform.setup();

  #if VERBOSE > 0
    Serial.println("Actuator info");
    for (int i = 0; i < NUM_ACTUATORS; i++) {
      Serial.print("Actuator "); Serial.print(i); 
      Serial.print(" position: ");
      Serial.println(platform.getActuatorPosition(i));
      Serial.print("min: "); 
      Serial.println(platform.getActuatorMinPosition(i));
      Serial.print("max: "); 
      Serial.println(platform.getActuatorMaxPosition(i));
      Serial.print("target: ");
      Serial.println(platform.getActuatorTarget(i));
      Serial.print("ready: ");
      Serial.println(platform.isActuatorReady(i));
      Serial.println();
    } 
  #endif

  #if GRAPH > 0
    // print the min and max positions of each actuator
    for (int i = 0; i < NUM_ACTUATORS; i++) {
      Serial.print(platform.getActuatorMaxPosition(i));
      Serial.print(',');
    }
    Serial.println();
    for (int i = 0; i < NUM_ACTUATORS; i++) {
      Serial.print(platform.getActuatorMinPosition(i));
      Serial.print(',');
    }
    Serial.println();
    Serial.println();
  #endif
}

void loop() {
  if(digitalRead(SHDN_BTN) == LOW) {
    platform.retract();
  } 
  else {
    #if DEMO > 0
      if (platform.isPlatformReady()) {
        Serial.println();
        Serial.print("point:");
        Serial.print(count2);

        platform.setPlatformPosition(positions[count2]);
        count2++;
        Serial.println(count2);
        if (count2 >= sizeof(positions) / NUM_ACTUATORS / sizeof(float)) {
          count2 = 0;
        }
      }
    #else
      if (platform.isPlatformReady()) {
        Serial.println();
        Serial.print("point:");
        Serial.print(count2);
        
        float ratio = (float)count2 / POINTS;
        float p[] = {3*cos(TWO_PI * ratio), 3*sin(TWO_PI * ratio), 3*sin(TWO_PI * ratio * 3)+6, 
                      0.5*sin(TWO_PI * ratio),0.5*cos(TWO_PI * ratio),0.5*sin(TWO_PI * ratio * 3)};
        // float p[] = {3*cos(TWO_PI * ratio), 3*sin(TWO_PI * ratio), 3*sin(TWO_PI * ratio * 3)+6, 
        //               0,0,0};

        platform.setPlatformPosition(p);

        count2++;
        if (count2 > POINTS) {
          count2 = 0;
        }
      }
    #endif
  }
  
  // platform.setSpeeds();
  platform.loop();

  #if GRAPH > 0
    // print the current raw and filtered positions of each actuator
    for (int i = 0; i < NUM_ACTUATORS; i++) {
      Serial.print(platform.getActuatorPosition(i));
      Serial.print(',');
      Serial.print(platform.getActuatorRawPosition(i));
      Serial.print(',');
    } 
    Serial.println();
  #endif
}
